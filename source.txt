--// ran when game starts using :starterscript

--// Variables
local players = game:GetService("Players")
local lp = players.LocalPlayer
local char = lp.Character
local hum = char.Humanoid
local stamina_gui = lp.PlayerGui.HUD.Bars.Stamina.Amount
local character_module = require(char.CharacterScript.CharacterActions)
local startlooping = false
local check;
--// thread creation
coroutine.resume(coroutine.create(function()
    while wait(0.1) and startlooping do
        xpcall(function(...)
            --// very simple checks
            --// check for vim, not created by default, most scripts use vim to perform autodive
            check = game:FindService("VirtualInputManager") and lp:Kick("no autodiv okpls++____2")
            --// check for inf stam
            check = character_module.State.Stamina > 10 and lp:Kick("游녧")
            --// lame inf stam check but gets the job done
            local splitText = string.split(stamina_gui.Text, " / ")
            check = splitText[1] and tonumber(splitText[1]) ~= character_module.State.Stamina and lp:Kick("HUH")
            --// sloppy :Move() detection
            check = not (hum.MoveDirection.Y == 0) and lp:Kick("游땢游땢游땢游땢")
            --// check if table was made writeable
            check = (function() character_module["wowzers"] = "仇벒잺" end)() and lp:Kick("OK")
            --// should be unreachable
            lp:Kick("gooned")

        end, function(err)
            --// error check
            check = not string.find(err, "to modify a") and lp:Kick("yikes")
        end)
    end
end))
--// :MoveTo() detection
hum.MoveToFinished:Connect(function(ok)
    lp:Kick("游때游때游때游때游때游때")
end)
---// store old dive function
local old_dive_function = character_module.Dive
--// overwrite dive func to include our own checks
character_module.Dive = function(...)
    --// caller check
    local calling_script = getfenv(2).script
    --// verify caller is by the game not a third party
    if not calling_script or calling_script.Name ~= "CharacterScript" or not calling_script.Parent or calling_script.Parent.Name ~= lp.Name then lp:Kick("why called my function 游땨游땨游땨游뱗游뱗游뱗游뱗游뱗") end
    --// return original dive function
    return old_dive_function(...)
end 


table.freeze(character_module)

startlooping = true

